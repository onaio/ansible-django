- name: Add system group
  group:
    name: "{{ django_system_group }}"
    state: present

- name: Add system user
  user:
    name: "{{ django_system_user }}"
    shell: /bin/bash
    group: "{{ django_system_group }}"
    append: true
    createhome: true

- name: Update apt cache
  apt:
    update_cache: "yes"

- name: Install system-wide dependencies
  apt:
    name: "{{ django_system_wide_dependencies }}"
    state: present
    update_cache: true
    cache_valid_time: 600

- name: Delete virtualenv
  file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "{{ django_venv_path }}"
  when: django_recreate_virtual_env

- name: Ensure required directories are present
  file:
    state: directory
    owner: "{{ django_system_user }}"
    group: "{{ django_system_group }}"
    path: "{{ item }}"
  when:
    - item is defined
    - item is not none
  with_items:
    - "{{ django_pid_socks_dir }}"
    - "{{ django_versioned_path }}"
    - "{{ django_venv_path }}"
    - "{{ django_log_path }}"
    - "{{ django_system_user_home }}/.ssh"

- name: Copy git key from string
  copy:
    content: "{{ django_git_key_content }}"
    dest: "{{ django_system_user_home }}/.ssh/{{ django_git_key_filename }}"
    owner: "{{ django_system_user }}"
    mode: "0600"
  no_log: false
  when:
    - django_git_key_content is defined
    - django_git_key_content is not none

- name: Copy git key from file
  copy:
    src: "{{ django_git_key_ssh_file }}"
    dest: "{{ django_system_user_home }}/.ssh/{{ django_git_key_filename }}"
    owner: "{{ django_system_user }}"
    mode: "0600"
  no_log: false
  when:
    - django_git_key_ssh_file is defined
    - django_git_key_ssh_file is not none

- name: Git clone with key
  git:
    accept_hostkey: "yes"
    repo: "{{ django_git_url }}"
    dest: "{{ django_checkout_path }}"
    version: "{{ django_git_version }}"
    depth: "1"
    key_file: "{{ django_system_user_home }}/.ssh/{{ django_git_key_filename }}"
    force: true
  become: true
  become_user: "{{ django_system_user }}"
  when:
    - django_git_key_content is defined or django_git_key_ssh_file is defined
    - django_git_key_content is not none or django_git_key_ssh_file is not none

- name: Ensure Github is in the known hosts file
  known_hosts:
    path: "{{ django_system_user_home }}/.ssh/known_hosts"
    name: github.com
    key: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
  when:
    - django_git_key_content is defined or django_git_key_ssh_file is defined
    - django_git_key_content is not none or django_git_key_ssh_file is not none

- name: Git clone without key
  git:
    accept_hostkey: "yes"
    repo: "{{ django_git_url }}"
    dest: "{{ django_checkout_path }}"
    version: "{{ django_git_version }}"
    depth: "1"
    force: true
  become: true
  become_user: "{{ django_system_user }}"
  when:
    - django_git_key_content is not defined or django_git_key_content is none
    - django_git_key_ssh_file is not defined or django_git_key_ssh_file is none

- name: Upgrade pip to latest version
  pip:
    name: pip
    state: present

- name: Upgrade setuptools to desired version
  pip:
    name: setuptools
    version: "{{ django_setuptools_version }}"
    state: present
    virtualenv: "{{ django_venv_path }}"
    virtualenv_python: "{{ django_python_version }}"
  become: true
  become_user: "{{ django_system_user }}"
  when: django_setuptools_version is defined and django_setuptools_version

- name: Install dependency Python packages using pip
  pip:
    name: "{{ django_dependency_pip_packages }}"
    state: present
    virtualenv: "{{ django_venv_path }}"
    virtualenv_python: "{{ django_python_version }}"
  become: true
  become_user: "{{ django_system_user }}"

- name: Install Python packages using pip
  pip:
    state: present
    requirements: "{{ item }}"
    virtualenv: "{{ django_venv_path }}"
    virtualenv_python: "{{ django_python_version }}"
  become: true
  become_user: "{{ django_system_user }}"
  with_items: "{{ django_pip_paths }}"
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ ansible_user_dir }}/.local/bin"
  when:
    - django_use_regular_old_pip| bool

- name: Install pipenv
  pip:
    name: pipenv
    state: present
    virtualenv: "{{ django_venv_path }}"
    virtualenv_python: "{{ django_python_version }}"
  become: true
  become_user: "{{ django_system_user }}"
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ ansible_user_dir }}/.local/bin"
  when:
    - django_use_pipenv| bool

- name: Download Poetry
  get_url:
    url: "https://install.python-poetry.org"
    dest: /tmp/install-poetry.py
  become: true
  become_user: "{{ django_system_user }}"
  when:
    - django_use_poetry| bool

- name: Install Poetry
  command: "{{ django_python_version }} /tmp/install-poetry.py  --version 1.1.15"
  become: true
  become_user: "{{ django_system_user }}"
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ django_system_user }}/.local/bin"
  when:
    - django_use_poetry| bool

- name: Disable poetry virtualenv
  command: "{{ django_system_user_home }}/.local/bin/poetry config virtualenvs.create false"
  become: true
  become_user: "{{ django_system_user }}"
  when:
    - django_use_poetry| bool

- name: Set poetry virtualenv
  command: "{{ django_system_user_home }}/.local/bin/poetry config virtualenvs.path {{ django_system_user_home }}/.virtualenvs/"
  become: true
  become_user: "{{ django_system_user }}"
  when:
    - django_use_poetry| bool

- name: Install requriements via poetry
  shell: source {{ django_venv_path }}/bin/activate && {{ django_system_user_home }}/.local/bin/poetry install
  become: true
  become_user: "{{ django_system_user }}"
  args:
    chdir: "{{ django_checkout_path }}"
    executable: /bin/bash
  when:
    - django_use_poetry| bool

- name: Install Python packages using pipenv
  shell: source {{ django_venv_path }}/bin/activate && export PIPENV_VERBOSITY=-1 && pipenv sync --python {{ django_python_version }}
  become: true
  become_user: "{{ django_system_user }}"
  args:
    chdir: "{{ django_checkout_path }}"
    executable: /bin/bash
  environment:
    PIPENV_VERBOSITY: -1
  when:
    - django_use_pipenv| bool

- name: Install other python packages using pip
  pip:
    name: "{{ django_pip_packages }}"
    state: present
    virtualenv: "{{ django_venv_path }}"
    virtualenv_python: "{{ django_python_version }}"
    extra_args: "{{ django_pip_packages_extra_args }}"
  become: true
  become_user: "{{ django_system_user }}"

- name: Install packages from Github
  become: true
  become_user: "{{ django_system_user }}"
  pip:
    name: "{{ item }}"
    virtualenv: "{{ django_venv_path }}"
    virtualenv_python: "{{ django_python_version }}"
    extra_args: "-e"
  with_items: "{{ django_optional_git_packages }}"
  when: django_optional_git_packages is defined and django_use_regular_old_pip

- name: Remove Git Key
  file:
    state: absent
    path: "{{ django_system_user_home }}/.ssh/{{ django_git_key_filename }}"
  become: true
  become_user: "{{ django_system_user }}"
  when:
    - django_git_key_content is defined or django_git_key_ssh_file is defined
    - django_git_key_content is not none or django_git_key_ssh_file is not none
    - django_remove_git_key| bool

- name: Make sure the local settings directory is present
  file:
    path: "{{ django_local_settings_path | dirname }}"
    state: directory
    owner: "{{ django_system_user }}"
    group: "{{ django_system_group }}"
    mode: "0750"

- name: Copy local settings from template
  template:
    src: "{{ django_settings_template_path }}"
    dest: "{{ django_local_settings_path }}"
    owner: "{{ django_system_user }}"
    group: "{{ django_system_group }}"
    mode: "0644"

- name: Copy the environment script
  template:
    src: "django_checkout_path/django_environment_script_name.j2"
    dest: "{{ django_checkout_path }}/{{ django_environment_script_name }}"
    owner: "{{ django_system_user }}"
    group: "{{ django_system_group }}"
    mode: "0750"
